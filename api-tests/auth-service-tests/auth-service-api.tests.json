{
	"info": {
		"_postman_id": "e262d0c2-b563-4461-b948-807ee579f43e",
		"name": "AuthServiceAPITest",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "36861410"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" pm.test(\"Get login URL should return 200 with valid url redirect\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    const responseJson = pm.response.json();\r",
							"    const urlRedirect = responseJson.urlRedirect;\r",
							"    const queryParams = urlRedirect.split(\"?\")[1].split(\"&\");\r",
							"    console.log(queryParams);\r",
							"    const responseType = queryParams.find(q => q.includes(\"response_type\")).split(\"=\")[1];\r",
							"    const scope = queryParams.find(q => q.includes(\"scope\")).split(\"=\")[1];\r",
							"    const clientId = queryParams.find(q => q.includes(\"client_id\")).split(\"=\")[1];    \r",
							"    const state = queryParams.find(q => q.includes(\"state\")).split(\"=\")[1];\r",
							"    const nonce = queryParams.find(q => q.includes(\"nonce\")).split(\"=\")[1];\r",
							"    const redirectUrl = queryParams.find(q => q.includes(\"redirect_uri\")).split(\"=\")[1];\r",
							"    pm.expect(responseType).to.be.eq(\"CODE\");\r",
							"    pm.expect(scope).to.be.eq(\"openid\");\r",
							"    pm.expect(clientId).to.be.a(\"string\");\r",
							"    pm.expect(state).to.be.a(\"string\");\r",
							"    pm.expect(nonce).to.be.a(\"string\");\r",
							"    pm.expect(redirectUrl).to.be.a(\"string\");\r",
							"    pm.environment.set(\"STATE\", state);\r",
							"    pm.environment.set(\"NONCE\", nonce);\r",
							"    pm.environment.set(\"REDIRECT_URL\", urlRedirect);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{CHECKOUT_HOST}}/checkout/auth-service/v1/auth/login?recaptcha=03AFcWeA5W",
					"host": [
						"{{CHECKOUT_HOST}}"
					],
					"path": [
						"checkout",
						"auth-service",
						"v1",
						"auth",
						"login"
					],
					"query": [
						{
							"key": "recaptcha",
							"value": "03AFcWeA5W"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "OneIdentityRedirect",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Extract the HTML response\r",
							"var htmlResponse = pm.response.text();\r",
							"\r",
							"// Use regex to find the code in the HTML response\r",
							"var codeMatch = htmlResponse.match(/code=([^&]+)/);\r",
							"\r",
							"if (codeMatch) {\r",
							"    var code = codeMatch[1];\r",
							"    // Set the code as an environment variable\r",
							"    pm.environment.set(\"AUTH_CODE\", code);\r",
							"    console.log(\"Code extracted and set as environment variable AUTH_CODE: \" + code);\r",
							"} else {\r",
							"    console.log(\"Code not found in the HTML response.\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": "{{REDIRECT_URL}}"
			},
			"response": []
		},
		{
			"name": "AuthToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" pm.test(\"POST auth token 200 with auth code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    const responseJson = pm.response.json();\r",
							"    const authToken = responseJson.authToken;\r",
							"    pm.expect(authToken).to.be.a(\"string\");\r",
							"    pm.environment.set(\"SESSION_TOKEN\", authToken);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"state\": \"{{STATE}}\",\r\n    \"authCode\": \"{{AUTH_CODE}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{CHECKOUT_HOST}}/checkout/auth-service/v1/auth/token"
			},
			"response": []
		},
		{
			"name": "PaymentRequests (Inner Validate)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generateRandomNumberString(length) {\r",
							"    let result = '';\r",
							"    const characters = '0123456789';\r",
							"    const charactersLength = characters.length;\r",
							"    for (let i = 0; i < length; i++) {\r",
							"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"\r",
							"const randomNumberString = generateRandomNumberString(12);\r",
							"pm.environment.set(\"RANDOM_PAYMENT\", randomNumberString);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{SESSION_TOKEN}}"
					}
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{CHECKOUT_HOST}}/ecommerce/checkout/v3/auth/payment-requests/77777777777302016{{RANDOM_PAYMENT}}"
			},
			"response": []
		},
		{
			"name": "Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" pm.test(\"GET users return 200 with correct user information\", function () {",
							"    pm.response.to.have.status(200);",
							"    const responseJson = pm.response.json();",
							"    const userId = responseJson.userId;",
							"    const name = responseJson.name;",
							"    const familyName = responseJson.familyName;",
							"    pm.expect(userId).to.be.eq(pm.environment.get(\"AUTH_USER_EXPECT_CF\"));",
							"    pm.expect(name).to.be.eq(pm.environment.get(\"AUTH_USER_EXPECT_NAME\"));",
							"    pm.expect(familyName).to.be.eq(pm.environment.get(\"AUTH_USER_EXPECT_SURNAME\"));",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{SESSION_TOKEN}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{CHECKOUT_HOST}}/checkout/auth-service/v1/auth/users"
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Logout - Success - Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{SESSION_TOKEN}}"
					}
				},
				"method": "POST",
				"header": [],
				"url": "{{CHECKOUT_HOST}}/checkout/auth-service/v1/auth/logout"
			},
			"response": []
		}
	]
}
