{
	"info": {
		"_postman_id": "31c17369-db66-4fdb-aa95-6ba3a386ea7e",
		"name": "Ecommerce for Checkout API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23963988"
	},
	"item": [
		{
			"name": "Payment Verify - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payment Verify - Status code is 200 with valid json response\", function(){",
							"    ",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.response.to.have.status(200);",
							"",
							"    const requestRptId = pm.environment.get(\"VALID_FISCAL_CODE_PA\") + pm.environment.get(\"VALID_NOTICE_CODE\");",
							"    const fixedDueDate = pm.environment.get(\"DUE_DATE\")",
							"    const dueDate = fixedDueDate ==null ? new Date().toISOString().split('T')[0] : fixedDueDate;",
							"    const amount = parseInt(pm.environment.get(\"AMOUNT\"));",
							"    const expected = {",
							"        \"amount\": amount,",
							"        \"rptId\": requestRptId,",
							"        \"paFiscalCode\": \"77777777777\",",
							"        \"dueDate\": dueDate",
							"    };",
							"",
							"    pm.expect(responseJson.amount).eql(expected.amount);",
							"    pm.expect(responseJson.rptId).eql(expected.rptId);",
							"    pm.expect(responseJson.paFiscalCode).eql(expected.paFiscalCode);",
							"    pm.expect(responseJson.dueDate).eql(expected.dueDate);",
							"    pm.expect(responseJson.description).to.be.a.string;",
							"    pm.expect(responseJson.paName).to.be.a.string;",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const noticeCodePrefix = pm.environment.get(\"NOTICE_CODE_PREFIX\");",
							"const min = Number(noticeCodePrefix.concat(\"10000000000000\"));",
							"const max = Number(noticeCodePrefix.concat(\"19999999999999\"));",
							"const randomNoticeCode = _.random(min, max);",
							"pm.environment.set(\"VALID_NOTICE_CODE\", randomNoticeCode);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "deployment",
						"value": "{{DEPLOYMENT_PAYMENT_REQUESTS}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "{{CHECKOUT_HOST}}/ecommerce/checkout/v1/payment-requests/{{VALID_FISCAL_CODE_PA}}{{VALID_NOTICE_CODE}}?recaptchaResponse=token",
					"host": [
						"{{CHECKOUT_HOST}}"
					],
					"path": [
						"ecommerce",
						"checkout",
						"v1",
						"payment-requests",
						"{{VALID_FISCAL_CODE_PA}}{{VALID_NOTICE_CODE}}"
					],
					"query": [
						{
							"key": "recaptchaResponse",
							"value": "token"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Payment Verify - PPT_DOMINIO_SCONOSCIUTO",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payment Verify - Status code is 400 with detail equals to PPT_DOMINIO_SCONOSCIUTO\", function(){",
							"    ",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.faultCodeDetail).to.include(\"PPT_DOMINIO_SCONOSCIUTO\");",
							"",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "deployment",
						"value": "{{DEPLOYMENT_PAYMENT_REQUESTS}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{CHECKOUT_HOST}}/ecommerce/checkout/v1/payment-requests/{{UNKNOWN_FISCAL_CODE_PA}}{{UNKNOWN_NOTICE_CODE}}?recaptchaResponse=token",
					"host": [
						"{{CHECKOUT_HOST}}"
					],
					"path": [
						"ecommerce",
						"checkout",
						"v1",
						"payment-requests",
						"{{UNKNOWN_FISCAL_CODE_PA}}{{UNKNOWN_NOTICE_CODE}}"
					],
					"query": [
						{
							"key": "recaptchaResponse",
							"value": "token"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Payment Verify - PPT_STAZIONE_INT_PA_SCONOSCIUTA",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payment Verify - Status code is 400 with detail equals to PPT_STAZIONE_INT_PA_SCONOSCIUTA\", function(){",
							"    ",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.faultCodeDetail).equals(\"PPT_STAZIONE_INT_PA_SCONOSCIUTA\");",
							"",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "deployment",
						"value": "{{DEPLOYMENT_PAYMENT_REQUESTS}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{CHECKOUT_HOST}}/ecommerce/checkout/v1/payment-requests/{{UNKNOWN_STAZIONE_FISCAL_CODE_PA}}{{UNKNOWN_STAZIONE_NOTICE_CODE}}?recaptchaResponse=token",
					"host": [
						"{{CHECKOUT_HOST}}"
					],
					"path": [
						"ecommerce",
						"checkout",
						"v1",
						"payment-requests",
						"{{UNKNOWN_STAZIONE_FISCAL_CODE_PA}}{{UNKNOWN_STAZIONE_NOTICE_CODE}}"
					],
					"query": [
						{
							"key": "recaptchaResponse",
							"value": "token"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create transaction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Transaction creation - Status code is 200 with valid json response\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"    const response = pm.response.json();",
							"    const requestRptId = pm.environment.get(\"VALID_FISCAL_CODE_PA\") + pm.environment.get(\"VALID_NOTICE_CODE\");",
							"    const expectedReason = pm.environment.get(\"EXPECTED_PAYMENT_REASON\");",
							"    const expectedTransferListTokens = new Set([\"paFiscalCode\", \"digitalStamp\", \"transferAmount\"]);",
							"    const expectedWithoutAuthTokenAndTransactionId = {",
							"        \"status\": \"ACTIVATED\",",
							"        \"payments\": [",
							"            {",
							"                \"rptId\": requestRptId,",
							"                \"reason\": expectedReason,",
							"                \"amount\": 100,",
							"",
							"            }",
							"        ],",
							"        \"clientId\": \"CHECKOUT\",",
							"    };",
							"",
							"",
							"    const paymentsWithoutPaymentToken = response.payments.map(p => {",
							"        const { paymentToken, ...rest } = p;",
							"        return rest;",
							"    });",
							"    const paymentsWithoutPaymentTokenAndTransferList = paymentsWithoutPaymentToken.map(p => {",
							"        const { transferList, ...rest } = p;",
							"        return rest;",
							"    });",
							"    const paymentTokens = response.payments.map(e => e.paymentToken);",
							"",
							"    pm.expect(response.status).eql(expectedWithoutAuthTokenAndTransactionId.status);",
							"    pm.expect(paymentsWithoutPaymentTokenAndTransferList).eql(expectedWithoutAuthTokenAndTransactionId.payments);",
							"    pm.expect(paymentTokens).to.satisfy((tokens) => tokens.every(token => typeof token === \"string\"));",
							"    pm.expect(response.clientId).eql(expectedWithoutAuthTokenAndTransactionId.clientId);",
							"    pm.expect(response.authToken).to.be.a(\"string\");",
							"    pm.expect(response.transactionId).to.be.a(\"string\");",
							"    pm.expect(paymentsWithoutPaymentToken[0].transferList).to.satisfy((transferList) => transferList.every(transferListItem =>",
							"        Object.keys(transferListItem).every(property => expectedTransferListTokens.has(property))",
							"        && pm.expect(transferListItem.paFiscalCode).to.be.a(\"string\")",
							"        && pm.expect(transferListItem.digitalStamp).to.be.a(\"boolean\")",
							"        && pm.expect(transferListItem.transferAmount).to.be.a(\"number\")",
							"    ));",
							"    pm.environment.set(\"TRANSACTION_ID\", response.transactionId);",
							"    pm.environment.set(\"AMOUNT\", response.payments.reduce((total, payment) => total + payment.amount, 0))",
							"    pm.environment.set(\"AUTH_TOKEN\", response.authToken);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "deployment",
						"value": "{{DEPLOYMENT_TRANSACTION_SERVICE}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"paymentNotices\": [\n    {\n      \"rptId\": \"{{VALID_FISCAL_CODE_PA}}{{VALID_NOTICE_CODE}}\",\n      \"amount\": 100\n    }\n  ],\n  \"email\": \"mario.rossi@example.com\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{CHECKOUT_HOST}}/ecommerce/checkout/v1/transactions",
					"host": [
						"{{CHECKOUT_HOST}}"
					],
					"path": [
						"ecommerce",
						"checkout",
						"v1",
						"transactions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payment Support - browser info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payment Support - Status code is 200 with browsers detail\", function(){",
							"    ",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson.ip).not.equal(null);",
							"    pm.expect(responseJson.accept).not.equal(null);",
							"    pm.expect(responseJson.useragent).not.equal(null);",
							"",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{CHECKOUT_HOST}}/api/checkout/payment-transactions/v1/browsers/current/info",
					"host": [
						"{{CHECKOUT_HOST}}"
					],
					"path": [
						"api",
						"checkout",
						"payment-transactions",
						"v1",
						"browsers",
						"current",
						"info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payment transaction - xpay",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payment transaction xpay - Status code is 302 with params\", function() {",
							"    // vvv These are the same ones in the request URL! vvv",
							"    const requestParams = {",
							"        \"id\": \"NzA5MDEwMjg3NQ==\",",
							"        \"esito\": \"OK\",",
							"        \"idOperazione\": \"00054014\",",
							"        \"timestamp\": \"1638023340310\",",
							"        \"mac\": \"000000b500ba947c2614b547250c49e59477e6ef\",",
							"        \"xpayNonce\": \"58a83f26-1421-3350-8dd6-aa152de80000\"",
							"    };",
							"    /// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
							"",
							"    const expectedResponseParams = {",
							"        ...requestParams,",
							"        \"timeStamp\": requestParams.timestamp,",
							"        \"resumeType\": \"xpay\"",
							"    };",
							"    delete expectedResponseParams[\"timestamp\"];",
							"",
							"    pm.response.to.have.status(302);",
							"",
							"    const URL = require('url');",
							"    const redirectUrl = URL.parse(pm.response.headers.get(\"Location\"));",
							"    const responseQueryParams = Object.fromEntries(redirectUrl.query.split(\"&\").map(entry => {",
							"        const [name, value] = entry.split(/=(.*)/s);",
							"        return [name, value]",
							"    }));",
							"",
							"    pm.expect(expectedResponseParams).to.deep.equal(responseQueryParams);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{CHECKOUT_HOST}}/api/checkout/payment-transactions/v1/transactions/xpay/NzA5MDEwMjg3NQ==?esito=OK&idOperazione=00054014&timeStamp=1638023340310&mac=000000b500ba947c2614b547250c49e59477e6ef&xpayNonce=58a83f26-1421-3350-8dd6-aa152de80000",
					"host": [
						"{{CHECKOUT_HOST}}"
					],
					"path": [
						"api",
						"checkout",
						"payment-transactions",
						"v1",
						"transactions",
						"xpay",
						"NzA5MDEwMjg3NQ=="
					],
					"query": [
						{
							"key": "esito",
							"value": "OK"
						},
						{
							"key": "idOperazione",
							"value": "00054014"
						},
						{
							"key": "timeStamp",
							"value": "1638023340310"
						},
						{
							"key": "mac",
							"value": "000000b500ba947c2614b547250c49e59477e6ef"
						},
						{
							"key": "xpayNonce",
							"value": "58a83f26-1421-3350-8dd6-aa152de80000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Payment transaction- xpay verify",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payment transaction xpay verify Status code is 302\", function(){",
							"        pm.response.to.have.status(302);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{CHECKOUT_HOST}}/api/checkout/payment-transactions/v1/transactions/xpay/verification/NzA5MDEwMjg3NQ==?esito=OK&idOperazione=00054014&timeStamp=1638023340310&mac=000000b500ba947c2614b547250c49e59477e6ef&xpayNonce=58a83f26-1421-3350-8dd6-aa152de80000",
					"host": [
						"{{CHECKOUT_HOST}}"
					],
					"path": [
						"api",
						"checkout",
						"payment-transactions",
						"v1",
						"transactions",
						"xpay",
						"verification",
						"NzA5MDEwMjg3NQ=="
					],
					"query": [
						{
							"key": "esito",
							"value": "OK"
						},
						{
							"key": "idOperazione",
							"value": "00054014"
						},
						{
							"key": "timeStamp",
							"value": "1638023340310"
						},
						{
							"key": "mac",
							"value": "000000b500ba947c2614b547250c49e59477e6ef"
						},
						{
							"key": "xpayNonce",
							"value": "58a83f26-1421-3350-8dd6-aa152de80000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Payment transaction - vpos challenge",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payment transaction vpos challenge - Status code is 302\", function() {",
							"    pm.response.to.have.status(302);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{CHECKOUT_HOST}}/api/checkout/payment-transactions/v1/transactions/NzA5MDEwMjg3NQ==/challenge?esito=OK&idOperazione=00054014&timeStamp=1638023340310&mac=000000b500ba947c2614b547250c49e59477e6ef&xpayNonce=58a83f26-1421-3350-8dd6-aa152de80000",
					"host": [
						"{{CHECKOUT_HOST}}"
					],
					"path": [
						"api",
						"checkout",
						"payment-transactions",
						"v1",
						"transactions",
						"NzA5MDEwMjg3NQ==",
						"challenge"
					],
					"query": [
						{
							"key": "esito",
							"value": "OK"
						},
						{
							"key": "idOperazione",
							"value": "00054014"
						},
						{
							"key": "timeStamp",
							"value": "1638023340310"
						},
						{
							"key": "mac",
							"value": "000000b500ba947c2614b547250c49e59477e6ef"
						},
						{
							"key": "xpayNonce",
							"value": "58a83f26-1421-3350-8dd6-aa152de80000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Payment transaction - vpos method",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payment transaction vpos method - Status code is 200 with 3DS.Notification.Received\", function(){",
							"    pm.expect(pm.response.text()).to.include(\"3DS.Notification.Received\");",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{CHECKOUT_HOST}}/api/checkout/payment-transactions/v1/transactions/NzA5MDEwMjg3NQ==/method",
					"host": [
						"{{CHECKOUT_HOST}}"
					],
					"path": [
						"api",
						"checkout",
						"payment-transactions",
						"v1",
						"transactions",
						"NzA5MDEwMjg3NQ==",
						"method"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get payment method details for credit cards",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payment method details - Status code is 200 with valid json response\", function() {",
							"    pm.response.to.have.status(200);",
							"",
							"    const response = pm.response.json();",
							"    const paymentMethodId = pm.environment.get(\"PAYMENT_METHOD_ID\");",
							"    const expectedWithoutRangesAssetAndStatus = {",
							"        \"id\": paymentMethodId,",
							"        \"name\": \"Carte\",",
							"        \"description\": \"Carte di Credito e Debito\",",
							"        \"paymentTypeCode\": \"CP\"",
							"    };",
							"",
							"    pm.expect(response.id).eql(expectedWithoutRangesAssetAndStatus.id);",
							"    pm.expect(response.name).eql(expectedWithoutRangesAssetAndStatus.name);",
							"    pm.expect(response.description.toLowerCase).eql(expectedWithoutRangesAssetAndStatus.description.toLowerCase);",
							"    pm.expect(response.paymentTypeCode).eql(expectedWithoutRangesAssetAndStatus.paymentTypeCode);",
							"    pm.expect(response.asset).to.be.not.empty;",
							"    pm.expect(response.ranges).to.be.not.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "deployment",
						"value": "{{DEPLOYMENT_PAYMENT_METHODS}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{CHECKOUT_HOST}}/ecommerce/checkout/v1/payment-methods/{{PAYMENT_METHOD_ID}}",
					"host": [
						"{{CHECKOUT_HOST}}"
					],
					"path": [
						"ecommerce",
						"checkout",
						"v1",
						"payment-methods",
						"{{PAYMENT_METHOD_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Compute fee for credit card payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Fee compute - Status code is 200 with valid json response\", function() {",
							"    pm.response.to.have.status(200);",
							"",
							"    const response = pm.response.json();",
							"    const expectedWithoutBundles = {",
							"        \"paymentMethodName\": \"Carte\",",
							"        \"paymentMethodStatus\": \"ENABLED\",",
							"        \"belowThreshold\": false",
							"    };",
							"",
							"    pm.expect(response.paymentMethodName).eql(expectedWithoutBundles.paymentMethodName);",
							"    pm.expect(response.paymentMethodStatus).eql(expectedWithoutBundles.paymentMethodStatus);",
							"    pm.expect(response.belowThreshold).eql(expectedWithoutBundles.belowThreshold);",
							"    pm.expect(response.bundles).to.be.not.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "deployment",
						"value": "{{DEPLOYMENT_PAYMENT_METHODS}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"bin\": \"511111\",\n    \"touchpoint\": \"CHECKOUT\",\n    \"paymentAmount\": 100,\n    \"primaryCreditorInstitution\": \"77777777777\",\n    \"transferList\": [\n        {\n            \"creditorInstitution\": \"77777777777\",\n            \"digitalStamp\": false\n        }\n    ]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{CHECKOUT_HOST}}/ecommerce/checkout/v1/payment-methods/{{PAYMENT_METHOD_ID}}/fees",
					"host": [
						"{{CHECKOUT_HOST}}"
					],
					"path": [
						"ecommerce",
						"checkout",
						"v1",
						"payment-methods",
						"{{PAYMENT_METHOD_ID}}",
						"fees"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all payment methods",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get all payment methods - Status code is 200 with valid json response\", function() {",
							"    pm.response.to.have.status(200);",
							"",
							"    const response = pm.response.json();",
							"",
							"    const expectedPaymentMehtodKeys = new Set([\"asset\",\"description\",\"id\",\"name\",\"paymentTypeCode\",\"ranges\",\"status\"]);",
							"    //this line handle transient time for which response will differs from DEV and UAT until Checkout develop branch deploy in UAT env",
							"    const paymentMethods = response.paymentMethods == null ? response : response.paymentMethods;",
							"    pm.expect(paymentMethods).to.be.not.empty;",
							"    pm.expect(paymentMethods).to.satisfy((methods) => methods.every(method => Object.keys(method).every(property => expectedPaymentMehtodKeys.has(property))));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "deployment",
						"value": "{{DEPLOYMENT}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{CHECKOUT_HOST}}/ecommerce/payment-methods-service/v1/payment-methods",
					"host": [
						"{{CHECKOUT_HOST}}"
					],
					"path": [
						"ecommerce",
						"payment-methods-service",
						"v1",
						"payment-methods"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request authorization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Transaction authorization - Status code is 200 with valid json response\", function() {",
							"    pm.response.to.have.status(200);",
							"",
							"    const response = pm.response.json();",
							"",
							"    pm.expect(response.authorizationUrl).to.be.a(\"string\");",
							"    pm.expect(response.authorizationRequestId).to.be.a(\"string\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AUTH_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "deployment",
						"value": "{{DEPLOYMENT_TRANSACTION_SERVICE}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": {{AMOUNT}},\n    \"fee\": {{FEE}},\n    \"paymentInstrumentId\": \"{{PAYMENT_METHOD_ID}}\",\n    \"pspId\": \"{{PSP_ID}}\",\n    \"language\": \"IT\",\n    \"details\": {\n        \"detailType\": \"card\",\n        \"accountEmail\": \"mail@example.com\",\n        \"cvv\": \"123\",\n        \"pan\": \"5111114000023477\",\n        \"expiryDate\": \"203012\",\n        \"holderName\": \"Mario Rossi\",\n        \"threeDsData\": \"3dsdata\",\n        \"brand\":\"VISA\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{CHECKOUT_HOST}}/ecommerce/checkout/v1/transactions/{{TRANSACTION_ID}}/auth-requests",
					"host": [
						"{{CHECKOUT_HOST}}"
					],
					"path": [
						"ecommerce",
						"checkout",
						"v1",
						"transactions",
						"{{TRANSACTION_ID}}",
						"auth-requests"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete transaction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Transaction cancellation - Status code is 202.\", function() {",
							"    pm.response.to.have.status(202);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const noticeCodePrefix = pm.environment.get(\"NOTICE_CODE_PREFIX\");",
							"const min = Number(noticeCodePrefix.concat(\"10000000000000\"));",
							"const max = Number(noticeCodePrefix.concat(\"19999999999999\"));",
							"const randomNoticeCode = _.random(min, max);",
							"pm.environment.set(\"VALID_NOTICE_CODE\", randomNoticeCode);",
							"",
							"",
							"const requestBody = {",
							"  \"paymentNotices\": [",
							"    {",
							"      \"rptId\": pm.environment.get(\"VALID_FISCAL_CODE_PA\") + pm.environment.get(\"VALID_NOTICE_CODE\"),",
							"      \"amount\": 100",
							"    }",
							"  ],",
							"  \"email\": \"mario.rossi@example.com\"",
							"};",
							"",
							"const deploymentHeader = pm.environment.get(\"DEPLOYMENT_TRANSACTION_SERVICE\")",
							"",
							"const requestObject = {",
							"  url: pm.environment.get(\"CHECKOUT_HOST\") + \"/ecommerce/checkout/v1/transactions\",",
							"  method: 'POST',",
							"  header: {",
							"    'Content-Type': 'application/json',",
							"    'deployment' : deploymentHeader,",
							"  },",
							"  body: {",
							"    mode: 'raw',",
							"    raw: JSON.stringify(requestBody)",
							"  }",
							"};",
							"",
							"pm.sendRequest(requestObject, (error, response) => {",
							"  if (error) {",
							"    console.log(error);",
							"  } else {",
							"      const responseBody = response.json();",
							"      pm.environment.set(\"TRANSACTION_ID\", responseBody.transactionId);",
							"      pm.environment.set(\"AUTH_TOKEN\", responseBody.authToken);",
							"  }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{AUTH_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "deployment",
						"value": "{{DEPLOYMENT_TRANSACTION_SERVICE}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{CHECKOUT_HOST}}/ecommerce/checkout/v1/transactions/{{TRANSACTION_ID}}",
					"host": [
						"{{CHECKOUT_HOST}}"
					],
					"path": [
						"ecommerce",
						"checkout",
						"v1",
						"transactions",
						"{{TRANSACTION_ID}}"
					]
				}
			},
			"response": []
		}
	]
}